version: 2.1
commands:
  install_dependencies:
    steps:
      - run: gem install bundler -v '2.3.22'
      - run: cp Gemfile.lock Gemfile.lock.bak
      - restore_cache:
          key: &gem_key pdc_orcid-cimg-{{ checksum "Gemfile.lock.bak" }}
      - run: bundle install --path ./vendor/bundle
      - save_cache:
          key: *gem_key
          paths:
            - ./vendor/bundle
      - restore_cache:
          name: Restore Yarn Package Cache
          key: &yarn_key pdc_orcid-yarn-cimg-{{ checksum "yarn.lock" }}
      - run:
          name: Install NPM Dependencies via Yarn
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: *yarn_key
          paths:
            - ~/.cache/yarn
orbs:
  browser-tools: circleci/browser-tools@1.4.4
jobs:
  build:
    working_directory: ~/pdc_orcid
    docker:
      - &ruby_docker
        image: cimg/ruby:3.2.0-browsers
        environment:
          RAILS_ENV: test
    steps:
      - checkout
      - run: sudo apt update && sudo apt install postgresql-client libmsgpack-dev
      - install_dependencies
      - persist_to_workspace:
          root: &root '~/pdc_orcid'
          paths: '*'

  rubocop:
    working_directory: *root
    docker:
      - *ruby_docker
    steps:
      - attach_workspace:
          at: *root
      - run:
          name: Run rubocop
          command: bundle exec rubocop

  eslint:
    # We don't actually need any of the ruby environment to lint JS... but use what we have for now.
    working_directory: ~/pdc_orcid
    docker:
      - image: cimg/ruby:3.2.0-browsers
        environment:
          RAILS_ENV: test
    steps:
      - attach_workspace:
          at: '~/pdc_orcid'
      - install_dependencies
      - run:
          name: Run eslint
          # Quote directory globs so not they are expanded by shell,
          # and every file will be checked, regardless of extension.
          command: yarn run eslint 'app/javascript/**'

  test:
    working_directory: *root
    docker:
      - *ruby_docker
      - image: postgres:15-alpine
        environment:
          POSTGRES_USER: pdc_orcid_user
          POSTGRES_DB: test_db
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - attach_workspace:
          at: *root
      - browser-tools/install-firefox    
      - run:
          name: Wait for PostgreSQL
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: bundle exec rake db:create
      - run: bundle exec rake db:migrate
      - run: bundle exec rake db:migrate RAILS_ENV=test
      - run:
          name: Run Rspec
          command: COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN bundle exec rspec
      - persist_to_workspace:
          root: *root
          paths: 'coverage'
      - store_artifacts:
          path:
            ~/pdc_orcid/coverage
            ~/pdc_orcid/tmp/screenshots

  coverage_report:
    working_directory: *root
    docker:
      - *ruby_docker
    steps:
      - attach_workspace:
          at: *root
      - run:
          name: Merge and check coverage
          command: |
            # TODO set this to something better than 0 when we get some tests
            RAILS_ENV=test bundle exec rake simplecov:report_coverage\[0.0\]
      - store_artifacts:
          path: ~/pdc_orcid/coverage
          destination: coverage

workflows:
  version: 2
  build_accept_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - rubocop:
          requires:
            - build
      - eslint:
          requires:
            - build
      - coverage_report:
          requires:
            - test
